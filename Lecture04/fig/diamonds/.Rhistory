				cat("Randomizing, please wait...", "\n")#
				if(type1 == "quantitative"){#
					for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
					sim_dist_temp = apply(sim, 2, statistic)#
					if(est == "mean"){#
						# Hypotheses#
						cat(paste("H0: mu =", null, "\n"))#
						cat(paste("HA: mu", sign, null, "\n"))#
						sim_dist = sim_dist_temp - (mean(sim_dist_temp) - null)#
						#cat(mean(sim_dist))#
					}#
										#
					if(est == "median"){#
						cat(paste("H0: median =", null, "\n"))#
						cat(paste("HA: median", sign, null, "\n"))#
						sim_dist = sim_dist_temp - (median(sim_dist_temp) - null)#
						#cat(median(sim_dist))#
					}					#
				}#
				if(type1 == "categorical"){#
					cat(paste("H0: p =", null, "\n"))#
					cat(paste("HA: p", sign, null, "\n"))#
					sim_dist = rbinom(nsim, n, prob = null) / n#
				}#
				#
				smaller.tail = round(min(c(mean(sim_dist <= actual), mean(sim_dist >= actual))), 4)	#
				#
				if(nsim > 500){#
					counts = hist(sim_dist, plot = FALSE)$counts  #
					hist(sim_dist, main = "Randomization distribution", xlab = "randomization statistic", ylim = c(0, 1.4 * max(counts)))  #
				}#
				if(nsim <= 500){#
					counts = BHH2::dotPlot(sim_dist, main = "Randomization distribution", xlab = "randomization statistic")$y#
				}				#
				#
			    alternative = match.arg(alternative)#
#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)#
				}#
				if(alternative == "greater"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)#
				}#
				if(alternative == "twosided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)#
					if(actual >= null){#
						temp = actual - null#
						lines(x = c(null - temp,null - temp), y = c(0,1.1*max(counts)), col = "#225588", lwd=2)						#
					}#
					if(actual < null){#
						temp = null - actual#
						lines(x = c(null + temp,null + temp), y = c(0,1.1*max(counts)), col = "#225588", lwd=2)						#
					}		#
				}#
			  	text(x = actual, y = 1.2*max(counts), paste("observed =", round(actual,2)), col = "#225588", cex = 0.8)											#
			}		#
		}#
		#
		# theoretical#
		if(method == "theoretical"){#
			#
			# confidence interval#
			if(type == "ci"){#
				if(type1 == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")}#
					if(est == "mean"){#
						# check conditions#
						hist(var1, main = "Histogram of sample data", xlab = "sample data")	#
						cat("Check histogram to verify that sample data do not come from an extremely skewed distribution.\n")#
						# calculate me and se#
						se = sd(var1) / sqrt(n)#
						cat(paste("Standard error: ", round(se, 4), "\n"))#
						if(n >= 50) {critvalue = qnorm( (1 - conflevel)/2 + conflevel )}#
						if(n < 50) {critvalue = qt( (1 - conflevel)/2 + conflevel , df = n - 1)}					#
					}#
				}#
				if(type1 == "categorical"){#
					# check conditions#
					suc = round(n * actual, 2)#
					fail = round(n * (1 - actual), 2)#
					cat(paste("Number of expected successes: ", suc, ";", "Number of expected failures: ", fail), "\n")	#
					if(suc < 10 || fail < 10){#
						stop("There aren't at least 10 successes and 10 failures, use simulation methods instead.")#
					}#
					# calculate me and se#
					se = sqrt(actual * (1-actual) / n)#
					cat(paste("Standard error: ", round(se, 4), "\n"))#
					critvalue = qnorm( (1 - conflevel)/2 + conflevel )					#
				}#
				me = critvalue * se#
				ci = c(actual - me , actual + me)#
				cat(c(conflevel*100, "% Confidence interval = (", round(ci[1],2), ",", round(ci[2],2), ")\n"))	#
			}#
			#
			# hypothesis test#
			if(type == "ht"){#
				if(type1 == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")}#
					if(est == "mean"){#
						# Hypotheses#
						cat(paste("H0: mu =", null, "\n"))#
						cat(paste("HA: mu", sign, null, "\n"))#
						#
						# check conditions#
						par(mfrow = c(1,2))#
						hist(var1, main = "Histogram of sample data", xlab = "sample data")	#
						cat("Check histogram to verify that sample data do not come from an extremely skewed distribution.\n")#
						# calculate test statistic and p-value component#
						se = sd(var1) / sqrt(n)#
						teststat = (actual - null)/se#
						if(n >= 50){#
							cat(paste("Test statistic: Z = ", round(teststat, 3),"\n"))#
							smaller.tail = round(min(pnorm(teststat), pnorm(teststat, lower.tail = FALSE)), 4)#
							}#
						if(n < 50){#
							cat(paste("Test statistic: T = ", round(teststat, 3),"\n"))#
							cat(paste("Degrees of freedom: ", n - 1, "\n"))#
							smaller.tail = round(min(pt(teststat, df = n - 1), pt(teststat, df = n - 1, lower.tail = FALSE)), 4)#
							}		#
					}#
				}#
				if(type1 == "categorical"){#
					if(null < 0 || null > 1){#
						stop("Null value should be a proportion between 0 and 1.")#
					}#
					# Hypotheses#
					cat(paste("H0: p =", null, "\n"))#
					cat(paste("HA: p", sign, null, "\n"))#
					#
					#
					# check conditions#
					exp_suc = round(n * null, 2)#
					exp_fail = round(n * (1 - null), 2)#
					cat(paste("Number of expected successes: ", exp_suc, ";", "Number of expected failures: ", exp_fail), "\n")#
					if(exp_suc < 10 || exp_fail < 10){#
						stop("There aren't at least 10 expected successes and 10 expected failures, use simulation methods instead.")#
					}#
					# calculate test statistic and p-value#
					se = sqrt(null * (1 - null) / n)#
					teststat = (actual - null)/se#
					cat(paste("Test statistic: Z = ", round(teststat, 3),"\n"))#
					smaller.tail = round(min(pnorm(teststat), pnorm(teststat, lower.tail = FALSE)), 4)					#
				}#
#
				# alternative = less#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					normTail(L = teststat, axes = FALSE, col = "#22558833")#
					axis(1, at = c(-3, teststat, 0, 3), labels = c(NA, paste(round(actual,2)), paste(null), NA))#
				}#
#
				# alternative = greater#
				if(alternative == "greater"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					normTail(U = teststat, axes = FALSE, col = "#22558833")#
					axis(1, at = c(-3, 0, teststat, 3), labels = c(NA, paste(null), paste(round(actual,2)), NA))#
				}#
				#
				# alternative = twosided	#
				if(alternative == "twosided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					if(actual < null){#
						normTail(L = teststat, U = -1*teststat, axes = FALSE, col = "#22558833")#
						axis(1, at = c(-3, teststat, 0, -1*teststat, 3), labels = c(NA, paste(round(actual,2)), paste(null), paste(round(null + (null - actual), 2)), NA))#
					}#
					if(actual > null){#
						normTail(L = -1*teststat, U = teststat, axes = FALSE, col = "#22558833")#
						axis(1, at = c(-3, -1*teststat, 0, teststat, 3), labels = c(NA, paste(round(null - (actual - null), 2)), paste(null), paste(round(actual,2)), NA))#
					}				#
				}#
			}#
		}#
	# two variables#
	}#
	par(mfrow = c(1,1))#
}
inference(f, est = "mean", type = "ht", method = "simulation", nsim = 1000, null = 0.12, alternative = "less")
# inference#
inference <- function(var1, var2 = NULL, est = c("mean", "median", "proportion"), outcome = NULL, order = NA, nsim = 10000, conflevel = 0.95, null = NULL, alternative = c("less","greater","twosided"), type = c("ci","ht"), method = c("theoretical","simulation")){#
	# var1: variable 1, can be numeric or categorical#
	# var2: variable 2, categorical#
	# est: parameter to estimate, mean, median, or mode#
	# outcome: which outcome of the categorical variable to do inference on#
	# order: when var2 is given, order of groups in which to subtract parameters#
	# nsim: number of simulations#
	# level: confidence level, value between 0 and 1#
	#
	# load openintro package#
	if(!("openintro" %in% names(installed.packages()[,"Package"]))){install.packages("openintro")}#
	if(!("BHH2" %in% names(installed.packages()[,"Package"]))){install.packages("openintro")}#
	library(openintro)#
	library(BHH2)#
		#
	# possible error: weird data#
	if(length(var1) == 1){stop("Sample size is only 1, check input.")}#
	#
	# possible error: missing arguments#
	if(length(est) > 1){stop("Missing estimate: mean, median, or proportion")}#
	if(length(type) > 1){stop("Missing type: confidence interval or hypothesis test")}#
	if(length(method) > 1){stop("Missing method: theoretical or simulation")}#
	#
	if(type == "ht" & is.null(null)){stop("Missing null value")}#
	if(type == "ht" & length(alternative) > 1){stop("Missing alternative: less, greater, or twosided")}#
	#
	# possible error: variables not of same length#
	if (!is.null(var2)){#
		if (length(var1) != length(var2)) {stop("The two variables must be of the same length.")}#
	}#
	#
	# possible error: confidence level greater than 1#
	if(conflevel > 1){conflevel = conflevel / 100}#
		#
	# possible error: drop NAs, and if var2 is given, use pairwise complete#
	if (is.null(var2)) {#
    	if (sum(is.na(var1)) > 0) {var1 = var1[!is.na(var1)]}#
  	}#
	if (!is.null(var2)) {#
    	if (sum(is.na(var1)) > 0 | sum(is.na(var2)) > 0) {#
      		var1.temp = var1[!is.na(var1) & !is.na(var2)]#
      		var2.temp = var2[!is.na(var1) & !is.na(var2)]#
      		var1 = var1.temp#
      		var2 = var2.temp#
    	}#
  	}#
#
	# set variable type for var1#
	type1 = "categorical"#
  	if (is.numeric(var1)) {type1 = "quantitative"}#
	#
	# print variable types#
	if (!is.null(var2)) {#
    	type2 = "categorical"#
    	if(is.numeric(var2)){#
			type2 = "quantitative"#
    		cat(paste("Variable 1:", type1, ", Variable 2:", type2, "\n"))#
			}#
  		}#
	if (is.null(var2)) {#
    	type2 = "only1var"#
    	cat(paste("One", type1, "variable", "\n"))#
  	}#
#
	# the quantitative variable should be var1 if one categorical and one quantitative#
  	if (type1 == "categorical" & type2 == "quantitative") {#
    	var1.temp = var2#
    	var2.temp = var1#
    	var1 = var1.temp#
    	var2 = var2.temp#
    	type1 = "quantitative"#
    	type2 = "categorical"#
  	}#
#
	# possible error: wrong estimate#
	if(type1 == "quantitative" & est == "proportion"){#
		stop("Variable is quantitative, sample statistic cannot be a proportion, choose either mean or median")#
	}#
	#
	if(type1 == "categorical" & est == "mean"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	if(type1 == "categorical" & est == "median"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	#
	# possible error: outcome not defined for categorical variable#
	if(type1 == "categorical" & is.null(outcome)){#
		stop("Variable is categorical, please specify which outcome you are interested in.")#
	}#
	#
	# define sample size#
	n = length(var1)#
	#
	# define sign of hypothesis test#
	if(type == "ht"){#
		if(alternative == "less"){sign = "<"}#
		if(alternative == "greater"){sign = ">"}#
		if(alternative == "twosided"){sign = "!="}		#
	}#
#
	# one variable#
	if(type2 == "only1var"){#
		cat("Single", est, "\n")#
		# set statistic: mean, median, or proportion#
		if(type1 == "quantitative"){statistic = match.fun(est)}#
		if(type1 == "categorical"){statistic = function(var1){sum(var1 == outcome)/n}}#
	#
		actual = statistic(var1)#
		cat(paste("Observed ", est, sep = "", ": ", round(actual, 2)), "\n")#
		#
		# simulation#
		if(method == "simulation"){#
			sim = matrix(NA, nrow = n, ncol = nsim)#
			#
			# bootstrap ci#
			if(type == "ci"){#
				cat("Bootstrapping, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
				sim_dist = apply(sim, 2, statistic)#
#
				ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
				#
				if(nsim > 500){#
					counts = hist(sim_dist, plot = FALSE)$counts  #
					hist(sim_dist, main = "Bootstrap distribution", xlab = "bootstrap statistic")  #
				}#
				if(nsim <= 500){#
					counts = BHH2::dotPlot(sim_dist, main = "Bootstrap distribution", xlab = "bootstrap statistic")$y#
				}#
				#
				for (i in 1:2) {#
			    	segments(ci[i], 0, ci[i], 0.8 * max(counts), col="#225588", lwd=2)#
			    	text(round(ci[i],2), max(counts), pos=1, col="#225588", round(ci[i],2))#
			  	}#
#
				cat(c(conflevel*100, "% Bootstrap interval = (", round(ci[1],2), ",", round(ci[2],2), ")\n"))		#
			}#
			#
			# randomization test#
			if(type == "ht"){#
				cat("Randomizing, please wait...", "\n")#
				if(type1 == "quantitative"){#
					for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
					sim_dist_temp = apply(sim, 2, statistic)#
					if(est == "mean"){#
						# Hypotheses#
						cat(paste("H0: mu =", null, "\n"))#
						cat(paste("HA: mu", sign, null, "\n"))#
						sim_dist = sim_dist_temp - (mean(sim_dist_temp) - null)#
						#cat(mean(sim_dist))#
					}#
										#
					if(est == "median"){#
						cat(paste("H0: median =", null, "\n"))#
						cat(paste("HA: median", sign, null, "\n"))#
						sim_dist = sim_dist_temp - (median(sim_dist_temp) - null)#
						#cat(median(sim_dist))#
					}					#
				}#
				if(type1 == "categorical"){#
					cat(paste("H0: p =", null, "\n"))#
					cat(paste("HA: p", sign, null, "\n"))#
					sim_dist = rbinom(nsim, n, prob = null) / n#
				}#
				#
				smaller.tail = round(min(c(mean(sim_dist <= actual), mean(sim_dist >= actual))), 4)	#
				#
				if(nsim > 500){#
					counts = hist(sim_dist, plot = FALSE)$counts  #
					hist(sim_dist, main = "Randomization distribution", xlab = "randomization statistic", ylim = c(0, 1.3 * max(counts)))  #
				}#
				if(nsim <= 500){#
					counts = BHH2::dotPlot(sim_dist, main = "Randomization distribution", xlab = "randomization statistic")$y#
				}				#
				#
			    alternative = match.arg(alternative)#
#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)#
				}#
				if(alternative == "greater"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)#
				}#
				if(alternative == "twosided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)#
					if(actual >= null){#
						temp = actual - null#
						lines(x = c(null - temp,null - temp), y = c(0,1.1*max(counts)), col = "#225588", lwd=2)						#
					}#
					if(actual < null){#
						temp = null - actual#
						lines(x = c(null + temp,null + temp), y = c(0,1.1*max(counts)), col = "#225588", lwd=2)						#
					}		#
				}#
			  	text(x = actual, y = 1.2*max(counts), paste("observed =", round(actual,2)), col = "#225588", cex = 0.8)											#
			}		#
		}#
		#
		# theoretical#
		if(method == "theoretical"){#
			#
			# confidence interval#
			if(type == "ci"){#
				if(type1 == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")}#
					if(est == "mean"){#
						# check conditions#
						hist(var1, main = "Histogram of sample data", xlab = "sample data")	#
						cat("Check histogram to verify that sample data do not come from an extremely skewed distribution.\n")#
						# calculate me and se#
						se = sd(var1) / sqrt(n)#
						cat(paste("Standard error: ", round(se, 4), "\n"))#
						if(n >= 50) {critvalue = qnorm( (1 - conflevel)/2 + conflevel )}#
						if(n < 50) {critvalue = qt( (1 - conflevel)/2 + conflevel , df = n - 1)}					#
					}#
				}#
				if(type1 == "categorical"){#
					# check conditions#
					suc = round(n * actual, 2)#
					fail = round(n * (1 - actual), 2)#
					cat(paste("Number of expected successes: ", suc, ";", "Number of expected failures: ", fail), "\n")	#
					if(suc < 10 || fail < 10){#
						stop("There aren't at least 10 successes and 10 failures, use simulation methods instead.")#
					}#
					# calculate me and se#
					se = sqrt(actual * (1-actual) / n)#
					cat(paste("Standard error: ", round(se, 4), "\n"))#
					critvalue = qnorm( (1 - conflevel)/2 + conflevel )					#
				}#
				me = critvalue * se#
				ci = c(actual - me , actual + me)#
				cat(c(conflevel*100, "% Confidence interval = (", round(ci[1],2), ",", round(ci[2],2), ")\n"))	#
			}#
			#
			# hypothesis test#
			if(type == "ht"){#
				if(type1 == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")}#
					if(est == "mean"){#
						# Hypotheses#
						cat(paste("H0: mu =", null, "\n"))#
						cat(paste("HA: mu", sign, null, "\n"))#
						#
						# check conditions#
						par(mfrow = c(1,2))#
						hist(var1, main = "Histogram of sample data", xlab = "sample data")	#
						cat("Check histogram to verify that sample data do not come from an extremely skewed distribution.\n")#
						# calculate test statistic and p-value component#
						se = sd(var1) / sqrt(n)#
						teststat = (actual - null)/se#
						if(n >= 50){#
							cat(paste("Test statistic: Z = ", round(teststat, 3),"\n"))#
							smaller.tail = round(min(pnorm(teststat), pnorm(teststat, lower.tail = FALSE)), 4)#
							}#
						if(n < 50){#
							cat(paste("Test statistic: T = ", round(teststat, 3),"\n"))#
							cat(paste("Degrees of freedom: ", n - 1, "\n"))#
							smaller.tail = round(min(pt(teststat, df = n - 1), pt(teststat, df = n - 1, lower.tail = FALSE)), 4)#
							}		#
					}#
				}#
				if(type1 == "categorical"){#
					if(null < 0 || null > 1){#
						stop("Null value should be a proportion between 0 and 1.")#
					}#
					# Hypotheses#
					cat(paste("H0: p =", null, "\n"))#
					cat(paste("HA: p", sign, null, "\n"))#
					#
					#
					# check conditions#
					exp_suc = round(n * null, 2)#
					exp_fail = round(n * (1 - null), 2)#
					cat(paste("Number of expected successes: ", exp_suc, ";", "Number of expected failures: ", exp_fail), "\n")#
					if(exp_suc < 10 || exp_fail < 10){#
						stop("There aren't at least 10 expected successes and 10 expected failures, use simulation methods instead.")#
					}#
					# calculate test statistic and p-value#
					se = sqrt(null * (1 - null) / n)#
					teststat = (actual - null)/se#
					cat(paste("Test statistic: Z = ", round(teststat, 3),"\n"))#
					smaller.tail = round(min(pnorm(teststat), pnorm(teststat, lower.tail = FALSE)), 4)					#
				}#
#
				# alternative = less#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					normTail(L = teststat, axes = FALSE, col = "#22558833")#
					axis(1, at = c(-3, teststat, 0, 3), labels = c(NA, paste(round(actual,2)), paste(null), NA))#
				}#
#
				# alternative = greater#
				if(alternative == "greater"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					normTail(U = teststat, axes = FALSE, col = "#22558833")#
					axis(1, at = c(-3, 0, teststat, 3), labels = c(NA, paste(null), paste(round(actual,2)), NA))#
				}#
				#
				# alternative = twosided	#
				if(alternative == "twosided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					if(actual < null){#
						normTail(L = teststat, U = -1*teststat, axes = FALSE, col = "#22558833")#
						axis(1, at = c(-3, teststat, 0, -1*teststat, 3), labels = c(NA, paste(round(actual,2)), paste(null), paste(round(null + (null - actual), 2)), NA))#
					}#
					if(actual > null){#
						normTail(L = -1*teststat, U = teststat, axes = FALSE, col = "#22558833")#
						axis(1, at = c(-3, -1*teststat, 0, teststat, 3), labels = c(NA, paste(round(null - (actual - null), 2)), paste(null), paste(round(actual,2)), NA))#
					}				#
				}#
			}#
		}#
	# two variables#
	}#
	par(mfrow = c(1,1))#
}
inference(f, est = "mean", type = "ht", method = "simulation", nsim = 1000, null = 0.12, alternative = "less")
inference(f, est = "mean", type = "ht", method = "simulation", nsim = 100, null = 0.12, alternative = "less")
q()
985+85
q()
417/58
sample(1:417, size = 10, replace = FALSE)
library(foreign)
read.spss("http://www.thearda.com/ras/downloads/RAS_v1.2.2.sav")
a = read.spss("http://www.thearda.com/ras/downloads/RAS_v1.2.2.sav")
head(a)
names(a)
dim(A)
dim(a)
class(a)
?read.spss
a = read.spss("http://www.thearda.com/ras/downloads/RAS_v1.2.2.sav", to.data.frame = TRUE)
names(a)
dim(a)
head(a)
dim(a)
head(names(a))
table(a$EMAJREL)
table(a$Eemajpct)
table(a$emajpct)
table(a$EMAJPCT)
names(a)[1:20]
table(a$POPULATI)
names(a)[1:20]
names(a)[1: POPYEAR]
table(a$POPYEAR)
table(a$SCH1990)
a = read.spss("http://www.thearda.com/ras/downloads/RAS_v1.2.2.sav", to.data.frame = TRUE)
q()
1/101
101/100
100/101
q()
?nrow
?data
data()
data(AirPassengers)
n = nrow(AirPassengers)
rowstosample = sample(1:n, size = 1000, replace = FALSE)
n
data()
data(ChickWeight)
n = nrow(ChickWeight)
n
rowstosample = sample(1:n, size = 1000, replace = FALSE)
rowstosample = sample(1:n, size = 200, replace = FALSE)
mynewdata = mydata[rowstosample, ]
mynewdata = ChickWeight[rowstosample, ]
nrow(mynewdata)
1/70
q()
library(openintro)#
library(ggplot2)
data(diamonds)
caratPoint99 = round(diamonds$price[diamonds$carat == 0.99] / 99,2)
set.seed(223)
carat1 = round(sample(diamonds$price[diamonds$carat == 1], size = 30, replace = FALSE) / 100,2)
save(caratPoint99, carat1, file = "diamond.RData")
caratPoint99
head(diamonds)
pt99 = diamonds[diamonds$carat == 0.99,]#
pt100_full = diamonds[diamonds$carat == 1, ]
dim(pt_100)
dim(pt100_full)
set.seed(223)#
rows_to_sample = sample(1: nrow(pt100_full))#
pt100 = pt100_full[rows_to_sample,]
names(pt_100)
names(pt100)
pt99 = diamonds[diamonds$carat == 0.99,]#
pt99$ptprice = round(pt99$price / 99, 2)#
pt100_full = diamonds[diamonds$carat == 1, ]#
set.seed(223)#
rows_to_sample = sample(1: nrow(pt100_full))#
pt100 = pt100_full[rows_to_sample,]#
pt100$ptprice = round(pt100$price / 100, 2)
mean(pt100$ptpric)
pt99 = diamonds[diamonds$carat == 0.99,]#
pt99$ptprice = round(pt99$price / 99, 2)#
pt100_full = diamonds[diamonds$carat == 1, ]#
set.seed(223)#
rows_to_sample = sample(1: nrow(pt100_full), 30)#
pt100 = pt100_full[rows_to_sample,]#
pt100$ptprice = round(pt100$price / 100, 2)
mean(pt100$ptpric)
mean(pt100$ptprice)
names(pt100)
diamond = as.data.frame(rbind(pt99,pt100))
names(diamond)
mean(diamond$ptprice[diamond$carat = 0.99])
mean(diamond$ptprice[diamond$carat == 0.99])
mean(diamond$ptprice[diamond$carat == 1])
setwd("/Users/mine/Desktop/Teaching/Sta 101 - S12/Lectures/Lecture 15/6-2smallTwoMeans/figures/diamonds")
write.csv(diamond, file = "diamond.csv", row.names = FALSE)
boxplot(diamond$ptprice, diamond$carat, names = c("carat = 0.99", "carat = 1"))
boxplot(diamond$ptprice ~ diamond$carat, names = c("carat = 0.99", "carat = 1"))
inference(diamond$ptprice, diamond$carat, est = "mean", type = "ht", method = "theoretical", null = 0, alternative = "less", order = c(0.99, 1))
inference(diamond$ptprice, as.factor(diamond$carat), est = "mean", type = "ht", method = "theoretical", null = 0, alternative = "less", order = c("0.99", "1"))
#
pt99 = diamonds[diamonds$carat == 0.99,]#
pt99$ptprice = round(pt99$price / 99, 2)#
pt99$carat = pt99#
pt100_full = diamonds[diamonds$carat == 1, ]#
set.seed(223)#
rows_to_sample = sample(1: nrow(pt100_full), 30)#
pt100 = pt100_full[rows_to_sample,]#
pt100$ptprice = round(pt100$price / 100, 2)#
pt99$carat = pt100#
#
diamond = as.data.frame(rbind(pt99,pt100))
data(diamonds)#
#
pt99 = diamonds[diamonds$carat == 0.99,]#
pt99$ptprice = round(pt99$price / 99, 2)#
pt99$carat = pt99#
pt100_full = diamonds[diamonds$carat == 1, ]#
set.seed(223)#
rows_to_sample = sample(1: nrow(pt100_full), 30)#
pt100 = pt100_full[rows_to_sample,]#
pt100$ptprice = round(pt100$price / 100, 2)#
pt99$carat = pt100#
#
diamond = as.data.frame(rbind(pt99,pt100))
data(diamonds)#
#
pt99 = diamonds[diamonds$carat == 0.99,]#
pt99$ptprice = round(pt99$price / 99, 2)#
pt99$carat = "pt99"#
pt100_full = diamonds[diamonds$carat == 1, ]#
set.seed(223)#
rows_to_sample = sample(1: nrow(pt100_full), 30)#
pt100 = pt100_full[rows_to_sample,]#
pt100$ptprice = round(pt100$price / 100, 2)#
pt100$carat = "pt100"
diamond = as.data.frame(rbind(pt99,pt100))
diamond
class(diamond$carat)
write.csv(diamond, file = "diamond.csv", row.names = FALSE)
# inference#
inference <- function(var1, var2 = NULL, est = c("mean", "median", "proportion"), outcome = NULL, order = NULL, nsim = 10000, conflevel = 0.95, null = NULL, alternative = c("less","greater","twosided"), type = c("ci","ht"), method = c("theoretical","simulation")){#
	# var1: variable 1, can be numeric or categorical#
	# var2: variable 2, categorical#
	# est: parameter to estimate, mean, median, or mode#
	# outcome: which outcome of the categorical variable to do inference on#
	# order: when var2 is given, order of groups in which to subtract parameters#
	# nsim: number of simulations#
	# level: confidence level, value between 0 and 1#
	#
	# load openintro package#
	if(!("openintro" %in% names(installed.packages()[,"Package"]))){install.packages("openintro")}#
	if(!("BHH2" %in% names(installed.packages()[,"Package"]))){install.packages("BHH2")}#
	library(openintro)#
	library(BHH2)#
		#
	# possible error: weird data#
	if(length(var1) == 1){stop("Sample size is only 1, check input.")}#
	#
	# possible error: missing arguments#
	if(length(est) > 1){stop("Missing estimate: mean, median, or proportion")}#
	if(length(type) > 1){stop("Missing type: confidence interval or hypothesis test")}#
	if(length(method) > 1){stop("Missing method: theoretical or simulation")}#
	#
	if(type == "ht" & is.null(null)){stop("Missing null value")}#
	if(type == "ht" & length(alternative) > 1){stop("Missing alternative: less, greater, or twosided")}#
	#
	# possible error: method isn't theoretical or simulation#
	if(method %in% c("theoretical", "simulation") == FALSE){#
		stop("Method should be theoretical or simulation, check spelling and spaces.")#
	}#
	#
	# possible error: type isn't ci or ht#
	if(type %in% c("ci", "ht") == FALSE){#
		stop("Type should be ci or ht, check spelling and spaces.")#
	}#
	#
	# possible error: estimate isn't mean, median, or proportion#
	if(est %in% c("mean", "median", "proportion") == FALSE){#
		stop("Estimate should be mean, median, or proportion, check spelling and spaces.")#
	}#
	#
	# possible error: variables not of same length#
	if (!is.null(var2)){#
		if (length(var1) != length(var2)) {stop("The two variables must be of same length.")}#
	}#
	#
	# possible error: confidence level greater than 1#
	if(conflevel > 1){conflevel = conflevel / 100}#
		#
	# possible error: drop NAs, and if var2 is given, use pairwise complete#
	if (is.null(var2)) {#
    	if (sum(is.na(var1)) > 0) {var1 = var1[!is.na(var1)]}#
  	}#
	if (!is.null(var2)) {#
    	if (sum(is.na(var1)) > 0 | sum(is.na(var2)) > 0) {#
      		var1.temp = var1[!is.na(var1) & !is.na(var2)]#
      		var2.temp = var2[!is.na(var1) & !is.na(var2)]#
      		var1 = var1.temp#
      		var2 = var2.temp#
    	}#
  	}#
#
	# if var1 or var2 is character, make factor#
	if(is.character(var1)){var1 = as.factor(var1)}#
	if(is.character(var2)){var2 = as.factor(var2)}#
#
	# set variable type for var1#
	type1 = "categorical"#
  	if (is.numeric(var1)) {type1 = "quantitative"}#
	#
	# print variable types#
	if (!is.null(var2)) {#
    	type2 = "categorical"#
    	if(is.numeric(var2)){#
			type2 = "quantitative"#
    		cat(paste("Variable 1:", type1, ", Variable 2:", type2, "\n"))#
			}#
  	}#
	if (is.null(var2)) {#
    	type2 = "only1var"#
    	cat(paste("One", type1, "variable", "\n"))#
  	}#
#
	# the quantitative variable should be var1 if one categorical and one quantitative#
  	if (type1 == "categorical" & type2 == "quantitative") {#
    	var1.temp = var2#
    	var2.temp = var1#
    	var1 = var1.temp#
    	var2 = var2.temp#
    	type1 = "quantitative"#
    	type2 = "categorical"#
  	}#
#
	# possible error: wrong estimate#
	if(type1 == "quantitative" & est == "proportion"){#
		stop("Variable is quantitative, sample statistic cannot be a proportion, choose either mean or median")#
	}	#
	if(type1 == "categorical" & est == "mean"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	if(type1 == "categorical" & est == "median"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	#
	#
	# possible error: group variable has more than two levels#
	if(type2 == "categorical" & length(levels(var2)) > 2){#
		stop("Grouping variable (var2) can only have 2 levels.")#
	} #
	#
	# possible errors about outcome#
	if(type1 == "categorical"){#
		# outcome not provided for categorical variable#
		if(is.null(outcome)){#
			stop("Variable is categorical, please specify which outcome you are interested in.")#
		}#
		# possible error: outcome provided is not a level of the categorical variable#
		if(outcome %in% levels(var1) == FALSE){#
			stop(paste(outcome,"is not a level of the outcome variable."))#
		}#
	}#
#
	# possible warning: outcome provided for numerical variable#
	if(type1 == "quantitative" & !is.null(outcome)){#
		warning("Outcome is ignored for numeric variable.\n")#
	}#
	#
	# define sample size#
	n = length(var1)#
	#
	# define sign of hypothesis test#
	if(type == "ht"){#
		if(alternative == "less"){sign = "<"}#
		if(alternative == "greater"){sign = ">"}#
		if(alternative == "twosided"){sign = "!="}		#
	}#
#
	# one variable#
	if(type2 == "only1var"){#
		cat("Single", est, "\n")#
		# set statistic: mean, median, or proportion#
		if(type1 == "quantitative"){statistic = match.fun(est)}#
		if(type1 == "categorical"){statistic = function(x){sum(x == outcome)/length(x)}}#
	#
		actual = statistic(var1)#
		cat(paste("Observed", est, "=", round(actual, 4)), "\n")#
		#
		# simulation#
		if(method == "simulation"){#
			sim = matrix(NA, nrow = n, ncol = nsim)#
			#
			# bootstrap ci#
			if(type == "ci"){#
				cat("Bootstrapping, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
				if(type1 == "categorical"){#
					statistic = function(x){#
						which_outcome = which(levels(var1) == outcome)#
						sum(x == which_outcome)/length(x)#
						}#
					}				#
				sim_dist = apply(sim, 2, statistic)#
#
				ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
				#
				if(nsim > 500){#
					counts = hist(sim_dist, plot = FALSE)$counts  #
					hist(sim_dist, main = "Bootstrap distribution", xlab = "bootstrap statistic")  #
				}#
				if(nsim <= 500){#
					counts = BHH2::dotPlot(sim_dist, main = "Bootstrap distribution", xlab = "bootstrap statistic")$y#
				}#
				#
				for (i in 1:2) {#
			    	segments(ci[i], 0, ci[i], 0.8 * max(counts), col="#225588", lwd=2)#
			    	text(round(ci[i],2), max(counts), pos=1, col="#225588", round(ci[i],2))#
			  	}#
#
				cat(c(conflevel*100, "% Bootstrap interval = (", round(ci[1],2), ",", round(ci[2],2), ")\n"))		#
			}#
			#
			# randomization test#
			if(type == "ht"){#
				cat("Randomizing, please wait...", "\n")#
				if(type1 == "quantitative"){#
					for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
					sim_dist_temp = apply(sim, 2, statistic)#
					if(est == "mean"){#
						# hypotheses#
						cat(paste("H0: mu =", null, "\n"))#
						cat(paste("HA: mu", sign, null, "\n"))#
						sim_dist = sim_dist_temp - (mean(sim_dist_temp) - null)#
						#cat(mean(sim_dist))#
					}#
										#
					if(est == "median"){#
						cat(paste("H0: median =", null, "\n"))#
						cat(paste("HA: median", sign, null, "\n"))#
						sim_dist = sim_dist_temp - (median(sim_dist_temp) - null)#
						#cat(median(sim_dist))#
					}					#
				}#
				if(type1 == "categorical"){#
					cat(paste("H0: p =", null, "\n"))#
					cat(paste("HA: p", sign, null, "\n"))#
					sim_dist = rbinom(nsim, n, prob = null) / n#
				}#
				#
				smaller.tail = round(min(c(mean(sim_dist <= actual), mean(sim_dist >= actual))), 4)	#
				#
				if(nsim > 500){#
					counts = hist(sim_dist, plot = FALSE)$counts  #
					hist(sim_dist, main = "Randomization distribution", xlab = "randomization statistic", ylim = c(0, 1.3 * max(counts)))  #
				}#
				if(nsim <= 500){#
					counts = BHH2::dotPlot(sim_dist, main = "Randomization distribution", xlab = "randomization statistic")$y#
				}				#
				#
			    alternative = match.arg(alternative)#
#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)#
				}#
				if(alternative == "greater"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)#
				}#
				if(alternative == "twosided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)#
					if(actual >= null){#
						temp = actual - null#
						lines(x = c(null - temp,null - temp), y = c(0,1.1*max(counts)), col = "#225588", lwd=2)						#
					}#
					if(actual < null){#
						temp = null - actual#
						lines(x = c(null + temp,null + temp), y = c(0,1.1*max(counts)), col = "#225588", lwd=2)						#
					}		#
				}#
			  	text(x = actual, y = 1.2*max(counts), paste("observed\n", round(actual,4)), col = "#225588", cex = 0.8)											#
			}		#
		}#
		#
		# theoretical#
		if(method == "theoretical"){#
			#
			# confidence interval#
			if(type == "ci"){#
				if(type1 == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")}#
					if(est == "mean"){#
						# check conditions#
						hist(var1, main = "Histogram of sample data", xlab = "sample data")	#
						cat("Check histogram to verify that sample data do not come from an extremely skewed distribution.\n")#
						# calculate me and se#
						se = sd(var1) / sqrt(n)#
						cat(paste("Standard error =", round(se, 4), "\n"))#
						if(n >= 50) {critvalue = qnorm( (1 - conflevel)/2 + conflevel )}#
						if(n < 50) {critvalue = qt( (1 - conflevel)/2 + conflevel , df = n - 1)}					#
					}#
				}#
				if(type1 == "categorical"){#
					# check conditions#
					suc = round(n * actual, 2)#
					fail = round(n * (1 - actual), 2)#
					cat(paste("Number of successes =", round(suc), ";", "Number of failures =", round(fail)), "\n")	#
					if(suc < 10 | fail < 10){#
						stop("There aren't at least 10 successes and 10 failures, use simulation methods instead.")#
					}#
					# calculate me and se#
					se = sqrt(actual * (1-actual) / n)#
					cat(paste("Standard error =", round(se, 4), "\n"))#
					critvalue = qnorm( (1 - conflevel)/2 + conflevel )					#
				}#
				me = critvalue * se#
				ci = c(actual - me , actual + me)#
				cat(c(conflevel*100, "% Confidence interval = (", round(ci[1],2), ",", round(ci[2],2), ")\n"))	#
			}#
			#
			# hypothesis test#
			if(type == "ht"){#
				if(type1 == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")}#
					if(est == "mean"){#
						# hypotheses#
						cat(paste("H0: mu =", null, "\n"))#
						cat(paste("HA: mu", sign, null, "\n"))#
						#
						# check conditions#
						par(mfrow = c(1,2))#
						hist(var1, main = "Histogram of sample data", xlab = "sample data")	#
						cat("Check histogram to verify that sample data do not come from an extremely skewed distribution.\n")#
						# calculate test statistic and p-value component#
						se = sd(var1) / sqrt(n)#
						cat("Standard error =", round(se,4), "\n")#
						teststat = (actual - null)/se#
						if(n >= 50){#
							cat(paste("Test statistic: Z = ", round(teststat, 3),"\n"))#
							smaller.tail = round(min(pnorm(teststat), pnorm(teststat, lower.tail = FALSE)), 4)#
							}#
						if(n < 50){#
							cat(paste("Test statistic: T = ", round(teststat, 3),"\n"))#
							cat(paste("Degrees of freedom: ", n - 1, "\n"))#
							smaller.tail = round(min(pt(teststat, df = n - 1), pt(teststat, df = n - 1, lower.tail = FALSE)), 4)#
							}		#
					}#
				}#
				if(type1 == "categorical"){#
					if(null < 0 | null > 1){#
						stop("Null value should be a proportion between 0 and 1.")#
					}#
					# hypotheses#
					cat(paste("H0: p =", null, "\n"))#
					cat(paste("HA: p", sign, null, "\n"))#
					#
					#
					# check conditions#
					exp_suc = round(n * null, 2)#
					exp_fail = round(n * (1 - null), 2)#
					cat(paste("Number of expected successes =", round(exp_suc), ";", "Number of expected failures =", round(exp_fail)), "\n")#
					if(exp_suc < 10 | exp_fail < 10){#
						stop("There aren't at least 10 expected successes and 10 expected failures, use simulation methods instead.")#
					}#
					# calculate test statistic and p-value#
					se = sqrt(null * (1 - null) / n)#
					cat("Standard error =", round(se,4), "\n")#
					teststat = (actual - null)/se#
					cat(paste("Test statistic: Z = ", round(teststat, 3),"\n"))#
					smaller.tail = round(min(pnorm(teststat), pnorm(teststat, lower.tail = FALSE)), 4)					#
				}#
#
				# alternative = less#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					normTail(L = teststat, axes = FALSE, col = "#22558833")#
					axis(1, at = c(-3, teststat, 0, 3), labels = c(NA, paste(round(actual,2)), paste(null), NA))#
				}#
#
				# alternative = greater#
				if(alternative == "greater"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					normTail(U = teststat, axes = FALSE, col = "#22558833")#
					axis(1, at = c(-3, 0, teststat, 3), labels = c(NA, paste(null), paste(round(actual,2)), NA))#
				}#
				#
				# alternative = twosided	#
				if(alternative == "twosided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					if(actual < null){#
						normTail(L = teststat, U = -1*teststat, axes = FALSE, col = "#22558833")#
						axis(1, at = c(-3, teststat, 0, -1*teststat, 3), labels = c(NA, paste(round(actual,2)), paste(null), paste(round(null + (null - actual), 2)), NA))#
					}#
					if(actual > null){#
						normTail(L = -1*teststat, U = teststat, axes = FALSE, col = "#22558833")#
						axis(1, at = c(-3, -1*teststat, 0, teststat, 3), labels = c(NA, paste(round(null - (actual - null), 2)), paste(null), paste(round(actual,2)), NA))#
					}				#
				}#
				par(mfrow = c(1,1))#
			}#
		}#
	}	#
	#
	# two variables#
	if(type2 == "categorical"){#
#
		# order#
		if(is.null(order)){order = levels(var2)}#
		if(length(order) == 1 & !is.na(order[1])){#
			stop("Please provide two levels for order.")#
		}#
		if(length(order) == 2){#
			if( all(order %in% levels(var2)) == FALSE){#
				str = paste(order[which(!(order %in% levels(var2)))], collapse=" ")#
				stop(paste(str,": not a category of the group variable",sep = " "))#
			}#
			if((sum(levels(var2) == order) == 0) == TRUE){#
				group = relevel(var2, ref = levels(as.factor(var2))[2])#
			}	#
			if((sum(levels(var2) == order) == 0) == FALSE){#
				group = var2#
			}		#
		}#
#
		# print what's going on#
		if(type1 == "quantitative"){#
			cat("One quantitative and one categorical variable\n")#
		}#
		if(type1 == "categorical"){#
			cat("Two categorical variables\n")#
		}#
		cat("Difference between two ", est, "s", "\n", sep = "")#
#
		# calculate sample sizes#
	  	n1 = sum(group==levels(as.factor(group))[1])#
	  	n2 = sum(group==levels(as.factor(group))[2])#
	#
		# print sample sizes#
		n1_print = paste("n_", order[1], sep = "")		#
		n2_print = paste("n_", order[2], sep = "")		#
		cat(paste(n1_print, "=", n1, ";", n2_print, "=", n2, "\n"))#
#
		# set statistic: difference between means, medians, or proportions#
		if(type1 == "quantitative"){#
			statistic <- function(var1, group){	#
				if(est == "mean"){#
					stat = mean(var1[group == levels(as.factor(group))[1]]) - mean(var1[group == levels(as.factor(group))[2]])					#
				}#
				if(est == "median"){#
					stat = median(var1[group == levels(as.factor(group))[1]]) - median(var1[group == levels(as.factor(group))[2]])										#
				}#
				return(stat)#
			}#
		}#
		if(type1 == "categorical"){#
			statistic <- function(var1, group){	#
				sum(var1 == outcome & group == levels(as.factor(group))[1])/n1 - sum(var1 == outcome & group == levels(as.factor(group))[2])/n2 #
			}#
    	}#
#
		# calculate and print actual#
		actual = statistic(var1, group)#
		cat("Observed difference between ", est, "s = ", round(actual,4), "\n", sep = "")#
#
		# save label#
		label = paste("Difference in sample ", est, "s", ", ", levels(as.factor(group))[1],"-",levels(as.factor(group))[2], sep = "")#
		#
		# simulation#
		if(method == "simulation"){#
			n = length(var1)#
			sim = matrix(NA, nrow = n, ncol = nsim)#
			#
			# bootstrap ci#
			if(type == "ci"){#
				cat("Bootstrapping, please wait...", "\n")#
				#
				if(type1 == "quantitative"){statistic = match.fun(est)}#
				if(type1 == "categorical"){#
					statistic = function(x){#
						which_outcome = which(levels(var1) == outcome)#
						sum(x == which_outcome)/length(x)#
					}#
				}#
				#
				sim1 = matrix(NA, nrow = n1, ncol = nsim)#
				sim2 = matrix(NA, nrow = n2, ncol = nsim)#
#
				for(i in 1:nsim){sim1[,i] = sample(var1[group == order[1]], n1, replace = TRUE)}#
				for(i in 1:nsim){sim2[,i] = sample(var1[group == order[2]], n2, replace = TRUE)}#
				#
				sim_dist1 = apply(sim1, 2, statistic)#
				sim_dist2 = apply(sim2, 2, statistic)#
				#
				sim_dist = sim_dist1 - sim_dist2#
				#
				ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
				#
				if(nsim > 500){#
					counts = hist(sim_dist, plot = FALSE)$counts  #
					hist(sim_dist, main = "Bootstrap distribution", xlab = "bootstrap statistic")  #
				}#
				if(nsim <= 500){#
					counts = BHH2::dotPlot(sim_dist, main = "Bootstrap distribution", xlab = "bootstrap statistic")$y#
				}#
				#
				for (i in 1:2) {#
			    	segments(ci[i], 0, ci[i], 0.8 * max(counts), col="#225588", lwd=2)#
			    	text(round(ci[i],2), max(counts), pos=1, col="#225588", round(ci[i],2))#
			  	}#
#
				cat(c(conflevel*100, "% Bootstrap interval = (", round(ci[1],2), ",", round(ci[2],2), ")\n"))#
			}#
			#
			# randomization test			#
			if(type == "ht"){#
				# hypotheses#
				if(est == "mean"){#
					mu1 = paste("mu_", order[1], sep = "")		#
					mu2 = paste("mu_", order[2], sep = "")		#
					cat(paste("H0:", mu1 , "-", mu2, "=", null, "\n"))#
					cat(paste("HA:", mu1 , "-", mu2, sign, null, "\n"))#
				}#
									#
				if(est == "median"){#
					med1 = paste("median_", order[1], sep = "")		#
					med2 = paste("median_", order[2], sep = "")		#
					cat(paste("H0:", med1 , "-", med2, "=", null, "\n"))#
					cat(paste("HA:", med1 , "-", med2, sign, null, "\n"))#
				}#
				#
				if(est == "proportion"){#
					p1 = paste("p_", order[1], sep = "")		#
					p2 = paste("p_", order[2], sep = "")		#
					cat(paste("H0:", p1 , "-", p2, "=", null, "\n"))#
					cat(paste("HA:", p1 , "-", p2, sign, null, "\n"))#
				}#
				#
				cat("Randomizing, please wait...", "\n")#
				#
				for(i in 1:nsim){sim[,i] = sample(group, n, replace = FALSE)}#
				sim_dist = apply(sim, 2, statistic, var1 = var1)#
				#
				smaller.tail = round(min(c(mean(sim_dist <= actual), mean(sim_dist => actual))), 4)#
				#
				xmin = min(c(-1.1*abs(actual), sim_dist))#
			  	xmax = max(c(1.1*actual, sim_dist))#
				#
				if(nsim > 500){#
					counts = hist(sim_dist, plot = FALSE)$counts  #
					hist(sim_dist, main = "Randomization distribution", xlab = "randomization statistic", ylim = c(0, 1.3 * max(counts)), xlim = c(xmin,xmax))  #
				}#
				if(nsim <= 500){#
					counts = BHH2::dotPlot(sim_dist, main = "Randomization distribution", xlab = "randomization statistic", xlim = c(xmin,xmax))$y#
				}#
				#
			    alternative = match.arg(alternative)#
#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)#
				}#
				if(alternative == "greater"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)#
				}#
				if(alternative == "twosided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)#
					if(actual >= null){#
						temp = actual - null#
						lines(x = c(null - temp,null - temp), y = c(0,1.1*max(counts)), col = "#225588", lwd=2)						#
					}#
					if(actual < null){#
						temp = null - actual#
						lines(x = c(null + temp,null + temp), y = c(0,1.1*max(counts)), col = "#225588", lwd=2)						#
					}		#
				}#
				#
				text(x = actual, y = 1.25*max(counts), paste("observed\n", round(actual,4)), col = "#225588", cex = 0.8)											#
			}#
#
		}#
		#
		# theoretical#
		if(method == "theoretical"){#
			#
			# confidence interval#
			if(type == "ci"){#
				if(type1 == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")#
					}#
					if(est == "mean"){#
						# check conditions#
						boxplot(var1 ~ var2, main = "Boxplot of sample data", xlab = "sample data")#
						cat("Check boxplot to verify that sample data do not come from extremely skewed distributions.\n")#
						# calculate se and critvalue#
						s1 = sd(var1[group == levels(group)[1]])#
						s2 = sd(var1[group == levels(group)[2]])#
						se = sqrt(s1^2/n1 + s2^2/n2)#
						cat("Standard error =", round(se,4), "\n")#
						if(n1 >= 50 & n2 >= 50){critvalue = qnorm( (1 - conflevel)/2 + conflevel )}#
						if(n1 < 50 | n2 < 50) {critvalue = qt( (1 - conflevel)/2 + conflevel , df = min(n1 - 1, n2 - 1))}						#
					}#
					#
				}#
			#
				if(type1 == "categorical"){#
					# check conditions#
					suc1 = sum(var1[group == levels(group)[1]] == outcome)#
					fail1 = sum(var1[group == levels(group)[1]] != outcome)#
					cat(paste("Group 1: Number of successes =", round(suc1), ";", "Number of failures =", round(fail1)), "\n")	#
					#
					suc2 = sum(var1[group == levels(group)[2]] == outcome)#
					fail2 = sum(var1[group == levels(group)[2]] != outcome)#
					cat(paste("Group 2: Number of successes =", round(suc2), ";", "Number of failures =", round(fail2)), "\n")#
					#
					if(suc1 < 10 | fail1 < 10 | suc2 < 10 | fail2 < 10){#
						stop("There aren't at least 10 successes and 10 failures, use simulation methods instead.")#
					}#
					# calculate se and critvalue#
					p1 = suc1 / n1#
					p2 = suc2 / n2#
					se = sqrt(p1 * (1-p1)/n1 + p2 * (1-p2)/n2)#
					cat("Standard error =", round(se,4), "\n")#
					critvalue = qnorm( (1 - conflevel)/2 + conflevel )					#
					#
				}#
				#
				# calculate ci#
				me = critvalue * se#
				ci = c(actual - me , actual + me)#
				cat(c(conflevel*100, "% Confidence interval = (", round(ci[1],2), ",", round(ci[2],2), ")\n"))#
			}#
			#
			# hypothesis test#
			if(type == "ht"){#
				if(type1 == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")#
					}#
					if(est == "mean"){#
						# hypotheses#
						mu1 = paste("mu_", order[1], sep = "")		#
						mu2 = paste("mu_", order[2], sep = "")		#
						cat(paste("H0:", mu1 , "-", mu2, "=", null, "\n"))#
						cat(paste("HA:", mu1 , "-", mu2, sign, null, "\n"))#
						# check conditions#
						par(mfrow = c(1,2))#
						boxplot(var1 ~ var2, main = "Boxplot of sample data", xlab = "sample data")#
						cat("Check boxplot to verify that sample data do not come from extremely skewed distributions.\n")#
						# calculate test statistic and p-value component#
						s1 = sd(var1[group == levels(group)[1]])#
						s2 = sd(var1[group == levels(group)[2]])#
						se = sqrt(s1^2/n1 + s2^2/n2)#
						cat("Standard error =", round(se,3), "\n")#
						teststat = (actual - null)/se#
						if(n1 >= 50 & n2 >= 50){#
							cat(paste("Test statistic: Z = ", round(teststat, 3),"\n"))#
							smaller.tail = round(min(pnorm(teststat), pnorm(teststat, lower.tail = FALSE)), 4)#
							}#
						if(n1 < 50 | n2 < 50) {#
							cat(paste("Test statistic: T = ", round(teststat, 3),"\n"))#
							cat(paste("Degrees of freedom: ", min(n1 - 1, n2 - 1), "\n"))#
							smaller.tail = round(min(pt(teststat, df = min(n1 - 1, n2 - 1)), pt(teststat, df = min(n1 - 1, n2 - 1), lower.tail = FALSE)), 4)#
							}						#
					}	#
				}#
				if(type1 == "categorical"){#
					if(null <= -1 | null >= 1){#
						stop("Null value should be a proportion between 0 and 1.")#
					}#
					# hypotheses#
					p1 = paste("p_", order[1], sep = "")		#
					p2 = paste("p_", order[2], sep = "")		#
					cat(paste("H0:", p1 , "-", p2, "=", null, "\n"))#
					cat(paste("HA:", p1 , "-", p2, sign, null, "\n"))#
#
					# calculate p_pool#
					suc1 = sum(var1[group == levels(group)[1]] == outcome)#
					fail1 = sum(var1[group == levels(group)[1]] != outcome)#
					suc2 = sum(var1[group == levels(group)[2]] == outcome)#
					fail2 = sum(var1[group == levels(group)[2]] != outcome)#
					p_pool =  (suc1 + suc2)/(n1 + n2)#
					cat(paste("Pooled proportion =", round(p_pool, 4), "\n"))	#
					#
					# check conditions#
					exp_suc1 = n1 * p_pool#
					exp_fail1 = n1 * (1 - p_pool)#
					cat(paste("Group 1: Number of expected successes =", round(exp_suc1), ";", "Number of expected failures =", round(exp_fail1)), "\n")#
					exp_suc2 = n2 * p_pool#
					exp_fail2 = n2 * (1 - p_pool)#
					cat(paste("Group 2: Number of expected successes =", round(exp_suc2), ";", "Number of expected failures =", round(exp_fail2)), "\n")#
					if(exp_suc1 < 10 | exp_fail1 < 10 | exp_suc2 < 10 | exp_fail2 < 10){#
						stop("There aren't at least 10 expected successes and 10 expected failures, use simulation methods instead.")#
					}#
					# calculate test statistic and p-value#
					se = sqrt( p_pool * (1 - p_pool) / n1 + p_pool * (1 - p_pool) / n2 )#
					cat("Standard error =", round(se,3), "\n")#
					teststat = (actual - null) / se#
					cat(paste("Test statistic: Z = ", round(teststat, 3),"\n"))#
					smaller.tail = round(min(pnorm(teststat), pnorm(teststat, lower.tail = FALSE)), 4)								#
				}#
				# alternative = less#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					normTail(L = teststat, axes = FALSE, col = "#22558833")#
					axis(1, at = c(-3, teststat, 0, 3), labels = c(NA, paste(round(actual,2)), paste(null), NA))#
				}#
				# alternative = greater#
				if(alternative == "greater"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					normTail(U = teststat, axes = FALSE, col = "#22558833")#
					axis(1, at = c(-3, 0, teststat, 3), labels = c(NA, paste(null), paste(round(actual,2)), NA))#
				}				#
				# alternative = twosided	#
				if(alternative == "twosided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					if(actual < null){#
						normTail(L = teststat, U = -1*teststat, axes = FALSE, col = "#22558833")#
						axis(1, at = c(-3, teststat, 0, -1*teststat, 3), labels = c(NA, paste(round(actual,2)), paste(null), paste(round(null + (null - actual), 2)), NA))#
					}#
					if(actual > null){#
						normTail(L = -1*teststat, U = teststat, axes = FALSE, col = "#22558833")#
						axis(1, at = c(-3, -1*teststat, 0, teststat, 3), labels = c(NA, paste(round(null - (actual - null), 2)), paste(null), paste(round(actual,2)), NA))#
					}				#
				}#
				par(mfrow = c(1,1))#
#
			}#
			#
		}#
	#
	}#
	#
}
# inference#
inference <- function(var1, var2 = NULL, est = c("mean", "median", "proportion"), outcome = NULL, order = NULL, nsim = 10000, conflevel = 0.95, null = NULL, alternative = c("less","greater","twosided"), type = c("ci","ht"), method = c("theoretical","simulation")){#
	# var1: variable 1, can be numeric or categorical#
	# var2: variable 2, categorical#
	# est: parameter to estimate, mean, median, or mode#
	# outcome: which outcome of the categorical variable to do inference on#
	# order: when var2 is given, order of groups in which to subtract parameters#
	# nsim: number of simulations#
	# level: confidence level, value between 0 and 1#
	#
	# load openintro package#
	if(!("openintro" %in% names(installed.packages()[,"Package"]))){install.packages("openintro")}#
	if(!("BHH2" %in% names(installed.packages()[,"Package"]))){install.packages("BHH2")}#
	library(openintro)#
	library(BHH2)#
		#
	# possible error: weird data#
	if(length(var1) == 1){stop("Sample size is only 1, check input.")}#
	#
	# possible error: missing arguments#
	if(length(est) > 1){stop("Missing estimate: mean, median, or proportion")}#
	if(length(type) > 1){stop("Missing type: confidence interval or hypothesis test")}#
	if(length(method) > 1){stop("Missing method: theoretical or simulation")}#
	#
	if(type == "ht" & is.null(null)){stop("Missing null value")}#
	if(type == "ht" & length(alternative) > 1){stop("Missing alternative: less, greater, or twosided")}#
	#
	# possible error: method isn't theoretical or simulation#
	if(method %in% c("theoretical", "simulation") == FALSE){#
		stop("Method should be theoretical or simulation, check spelling and spaces.")#
	}#
	#
	# possible error: type isn't ci or ht#
	if(type %in% c("ci", "ht") == FALSE){#
		stop("Type should be ci or ht, check spelling and spaces.")#
	}#
	#
	# possible error: estimate isn't mean, median, or proportion#
	if(est %in% c("mean", "median", "proportion") == FALSE){#
		stop("Estimate should be mean, median, or proportion, check spelling and spaces.")#
	}#
	#
	# possible error: variables not of same length#
	if (!is.null(var2)){#
		if (length(var1) != length(var2)) {stop("The two variables must be of same length.")}#
	}#
	#
	# possible error: confidence level greater than 1#
	if(conflevel > 1){conflevel = conflevel / 100}#
		#
	# possible error: drop NAs, and if var2 is given, use pairwise complete#
	if (is.null(var2)) {#
    	if (sum(is.na(var1)) > 0) {var1 = var1[!is.na(var1)]}#
  	}#
	if (!is.null(var2)) {#
    	if (sum(is.na(var1)) > 0 | sum(is.na(var2)) > 0) {#
      		var1.temp = var1[!is.na(var1) & !is.na(var2)]#
      		var2.temp = var2[!is.na(var1) & !is.na(var2)]#
      		var1 = var1.temp#
      		var2 = var2.temp#
    	}#
  	}#
#
	# if var1 or var2 is character, make factor#
	if(is.character(var1)){var1 = as.factor(var1)}#
	if(is.character(var2)){var2 = as.factor(var2)}#
#
	# set variable type for var1#
	type1 = "categorical"#
  	if (is.numeric(var1)) {type1 = "quantitative"}#
	#
	# print variable types#
	if (!is.null(var2)) {#
    	type2 = "categorical"#
    	if(is.numeric(var2)){#
			type2 = "quantitative"#
    		cat(paste("Variable 1:", type1, ", Variable 2:", type2, "\n"))#
			}#
  	}#
	if (is.null(var2)) {#
    	type2 = "only1var"#
    	cat(paste("One", type1, "variable", "\n"))#
  	}#
#
	# the quantitative variable should be var1 if one categorical and one quantitative#
  	if (type1 == "categorical" & type2 == "quantitative") {#
    	var1.temp = var2#
    	var2.temp = var1#
    	var1 = var1.temp#
    	var2 = var2.temp#
    	type1 = "quantitative"#
    	type2 = "categorical"#
  	}#
#
	# possible error: wrong estimate#
	if(type1 == "quantitative" & est == "proportion"){#
		stop("Variable is quantitative, sample statistic cannot be a proportion, choose either mean or median")#
	}	#
	if(type1 == "categorical" & est == "mean"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	if(type1 == "categorical" & est == "median"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	#
	#
	# possible error: group variable has more than two levels#
	if(type2 == "categorical" & length(levels(var2)) > 2){#
		stop("Grouping variable (var2) can only have 2 levels.")#
	} #
	#
	# possible errors about outcome#
	if(type1 == "categorical"){#
		# outcome not provided for categorical variable#
		if(is.null(outcome)){#
			stop("Variable is categorical, please specify which outcome you are interested in.")#
		}#
		# possible error: outcome provided is not a level of the categorical variable#
		if(outcome %in% levels(var1) == FALSE){#
			stop(paste(outcome,"is not a level of the outcome variable."))#
		}#
	}#
#
	# possible warning: outcome provided for numerical variable#
	if(type1 == "quantitative" & !is.null(outcome)){#
		warning("Outcome is ignored for numeric variable.\n")#
	}#
	#
	# define sample size#
	n = length(var1)#
	#
	# define sign of hypothesis test#
	if(type == "ht"){#
		if(alternative == "less"){sign = "<"}#
		if(alternative == "greater"){sign = ">"}#
		if(alternative == "twosided"){sign = "!="}		#
	}#
#
	# one variable#
	if(type2 == "only1var"){#
		cat("Single", est, "\n")#
		# set statistic: mean, median, or proportion#
		if(type1 == "quantitative"){statistic = match.fun(est)}#
		if(type1 == "categorical"){statistic = function(x){sum(x == outcome)/length(x)}}#
	#
		actual = statistic(var1)#
		cat(paste("Observed", est, "=", round(actual, 4)), "\n")#
		#
		# simulation#
		if(method == "simulation"){#
			sim = matrix(NA, nrow = n, ncol = nsim)#
			#
			# bootstrap ci#
			if(type == "ci"){#
				cat("Bootstrapping, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
				if(type1 == "categorical"){#
					statistic = function(x){#
						which_outcome = which(levels(var1) == outcome)#
						sum(x == which_outcome)/length(x)#
						}#
					}				#
				sim_dist = apply(sim, 2, statistic)#
#
				ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
				#
				if(nsim > 500){#
					counts = hist(sim_dist, plot = FALSE)$counts  #
					hist(sim_dist, main = "Bootstrap distribution", xlab = "bootstrap statistic")  #
				}#
				if(nsim <= 500){#
					counts = BHH2::dotPlot(sim_dist, main = "Bootstrap distribution", xlab = "bootstrap statistic")$y#
				}#
				#
				for (i in 1:2) {#
			    	segments(ci[i], 0, ci[i], 0.8 * max(counts), col="#225588", lwd=2)#
			    	text(round(ci[i],2), max(counts), pos=1, col="#225588", round(ci[i],2))#
			  	}#
#
				cat(c(conflevel*100, "% Bootstrap interval = (", round(ci[1],2), ",", round(ci[2],2), ")\n"))		#
			}#
			#
			# randomization test#
			if(type == "ht"){#
				cat("Randomizing, please wait...", "\n")#
				if(type1 == "quantitative"){#
					for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
					sim_dist_temp = apply(sim, 2, statistic)#
					if(est == "mean"){#
						# hypotheses#
						cat(paste("H0: mu =", null, "\n"))#
						cat(paste("HA: mu", sign, null, "\n"))#
						sim_dist = sim_dist_temp - (mean(sim_dist_temp) - null)#
						#cat(mean(sim_dist))#
					}#
										#
					if(est == "median"){#
						cat(paste("H0: median =", null, "\n"))#
						cat(paste("HA: median", sign, null, "\n"))#
						sim_dist = sim_dist_temp - (median(sim_dist_temp) - null)#
						#cat(median(sim_dist))#
					}					#
				}#
				if(type1 == "categorical"){#
					cat(paste("H0: p =", null, "\n"))#
					cat(paste("HA: p", sign, null, "\n"))#
					sim_dist = rbinom(nsim, n, prob = null) / n#
				}#
				#
				smaller.tail = round(min(c(mean(sim_dist <= actual), mean(sim_dist >= actual))), 4)	#
				#
				if(nsim > 500){#
					counts = hist(sim_dist, plot = FALSE)$counts  #
					hist(sim_dist, main = "Randomization distribution", xlab = "randomization statistic", ylim = c(0, 1.3 * max(counts)))  #
				}#
				if(nsim <= 500){#
					counts = BHH2::dotPlot(sim_dist, main = "Randomization distribution", xlab = "randomization statistic")$y#
				}				#
				#
			    alternative = match.arg(alternative)#
#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)#
				}#
				if(alternative == "greater"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)#
				}#
				if(alternative == "twosided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)#
					if(actual >= null){#
						temp = actual - null#
						lines(x = c(null - temp,null - temp), y = c(0,1.1*max(counts)), col = "#225588", lwd=2)						#
					}#
					if(actual < null){#
						temp = null - actual#
						lines(x = c(null + temp,null + temp), y = c(0,1.1*max(counts)), col = "#225588", lwd=2)						#
					}		#
				}#
			  	text(x = actual, y = 1.2*max(counts), paste("observed\n", round(actual,4)), col = "#225588", cex = 0.8)											#
			}		#
		}#
		#
		# theoretical#
		if(method == "theoretical"){#
			#
			# confidence interval#
			if(type == "ci"){#
				if(type1 == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")}#
					if(est == "mean"){#
						# check conditions#
						hist(var1, main = "Histogram of sample data", xlab = "sample data")	#
						cat("Check histogram to verify that sample data do not come from an extremely skewed distribution.\n")#
						# calculate me and se#
						se = sd(var1) / sqrt(n)#
						cat(paste("Standard error =", round(se, 4), "\n"))#
						if(n >= 50) {critvalue = qnorm( (1 - conflevel)/2 + conflevel )}#
						if(n < 50) {critvalue = qt( (1 - conflevel)/2 + conflevel , df = n - 1)}					#
					}#
				}#
				if(type1 == "categorical"){#
					# check conditions#
					suc = round(n * actual, 2)#
					fail = round(n * (1 - actual), 2)#
					cat(paste("Number of successes =", round(suc), ";", "Number of failures =", round(fail)), "\n")	#
					if(suc < 10 | fail < 10){#
						stop("There aren't at least 10 successes and 10 failures, use simulation methods instead.")#
					}#
					# calculate me and se#
					se = sqrt(actual * (1-actual) / n)#
					cat(paste("Standard error =", round(se, 4), "\n"))#
					critvalue = qnorm( (1 - conflevel)/2 + conflevel )					#
				}#
				me = critvalue * se#
				ci = c(actual - me , actual + me)#
				cat(c(conflevel*100, "% Confidence interval = (", round(ci[1],2), ",", round(ci[2],2), ")\n"))	#
			}#
			#
			# hypothesis test#
			if(type == "ht"){#
				if(type1 == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")}#
					if(est == "mean"){#
						# hypotheses#
						cat(paste("H0: mu =", null, "\n"))#
						cat(paste("HA: mu", sign, null, "\n"))#
						#
						# check conditions#
						par(mfrow = c(1,2))#
						hist(var1, main = "Histogram of sample data", xlab = "sample data")	#
						cat("Check histogram to verify that sample data do not come from an extremely skewed distribution.\n")#
						# calculate test statistic and p-value component#
						se = sd(var1) / sqrt(n)#
						cat("Standard error =", round(se,4), "\n")#
						teststat = (actual - null)/se#
						if(n >= 50){#
							cat(paste("Test statistic: Z = ", round(teststat, 3),"\n"))#
							smaller.tail = round(min(pnorm(teststat), pnorm(teststat, lower.tail = FALSE)), 4)#
							}#
						if(n < 50){#
							cat(paste("Test statistic: T = ", round(teststat, 3),"\n"))#
							cat(paste("Degrees of freedom: ", n - 1, "\n"))#
							smaller.tail = round(min(pt(teststat, df = n - 1), pt(teststat, df = n - 1, lower.tail = FALSE)), 4)#
							}		#
					}#
				}#
				if(type1 == "categorical"){#
					if(null < 0 | null > 1){#
						stop("Null value should be a proportion between 0 and 1.")#
					}#
					# hypotheses#
					cat(paste("H0: p =", null, "\n"))#
					cat(paste("HA: p", sign, null, "\n"))#
					#
					#
					# check conditions#
					exp_suc = round(n * null, 2)#
					exp_fail = round(n * (1 - null), 2)#
					cat(paste("Number of expected successes =", round(exp_suc), ";", "Number of expected failures =", round(exp_fail)), "\n")#
					if(exp_suc < 10 | exp_fail < 10){#
						stop("There aren't at least 10 expected successes and 10 expected failures, use simulation methods instead.")#
					}#
					# calculate test statistic and p-value#
					se = sqrt(null * (1 - null) / n)#
					cat("Standard error =", round(se,4), "\n")#
					teststat = (actual - null)/se#
					cat(paste("Test statistic: Z = ", round(teststat, 3),"\n"))#
					smaller.tail = round(min(pnorm(teststat), pnorm(teststat, lower.tail = FALSE)), 4)					#
				}#
#
				# alternative = less#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					normTail(L = teststat, axes = FALSE, col = "#22558833")#
					axis(1, at = c(-3, teststat, 0, 3), labels = c(NA, paste(round(actual,2)), paste(null), NA))#
				}#
#
				# alternative = greater#
				if(alternative == "greater"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					normTail(U = teststat, axes = FALSE, col = "#22558833")#
					axis(1, at = c(-3, 0, teststat, 3), labels = c(NA, paste(null), paste(round(actual,2)), NA))#
				}#
				#
				# alternative = twosided	#
				if(alternative == "twosided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					if(actual < null){#
						normTail(L = teststat, U = -1*teststat, axes = FALSE, col = "#22558833")#
						axis(1, at = c(-3, teststat, 0, -1*teststat, 3), labels = c(NA, paste(round(actual,2)), paste(null), paste(round(null + (null - actual), 2)), NA))#
					}#
					if(actual > null){#
						normTail(L = -1*teststat, U = teststat, axes = FALSE, col = "#22558833")#
						axis(1, at = c(-3, -1*teststat, 0, teststat, 3), labels = c(NA, paste(round(null - (actual - null), 2)), paste(null), paste(round(actual,2)), NA))#
					}				#
				}#
				par(mfrow = c(1,1))#
			}#
		}#
	}	#
	#
	# two variables#
	if(type2 == "categorical"){#
#
		# order#
		if(is.null(order)){order = levels(var2)}#
		if(length(order) == 1 & !is.na(order[1])){#
			stop("Please provide two levels for order.")#
		}#
		if(length(order) == 2){#
			if( all(order %in% levels(var2)) == FALSE){#
				str = paste(order[which(!(order %in% levels(var2)))], collapse=" ")#
				stop(paste(str,": not a category of the group variable",sep = " "))#
			}#
			if((sum(levels(var2) == order) == 0) == TRUE){#
				group = relevel(var2, ref = levels(as.factor(var2))[2])#
			}	#
			if((sum(levels(var2) == order) == 0) == FALSE){#
				group = var2#
			}		#
		}#
#
		# print what's going on#
		if(type1 == "quantitative"){#
			cat("One quantitative and one categorical variable\n")#
		}#
		if(type1 == "categorical"){#
			cat("Two categorical variables\n")#
		}#
		cat("Difference between two ", est, "s", "\n", sep = "")#
#
		# calculate sample sizes#
	  	n1 = sum(group==levels(as.factor(group))[1])#
	  	n2 = sum(group==levels(as.factor(group))[2])#
	#
		# print sample sizes#
		n1_print = paste("n_", order[1], sep = "")		#
		n2_print = paste("n_", order[2], sep = "")		#
		cat(paste(n1_print, "=", n1, ";", n2_print, "=", n2, "\n"))#
#
		# set statistic: difference between means, medians, or proportions#
		if(type1 == "quantitative"){#
			statistic <- function(var1, group){	#
				if(est == "mean"){#
					stat = mean(var1[group == levels(as.factor(group))[1]]) - mean(var1[group == levels(as.factor(group))[2]])					#
				}#
				if(est == "median"){#
					stat = median(var1[group == levels(as.factor(group))[1]]) - median(var1[group == levels(as.factor(group))[2]])										#
				}#
				return(stat)#
			}#
		}#
		if(type1 == "categorical"){#
			statistic <- function(var1, group){	#
				sum(var1 == outcome & group == levels(as.factor(group))[1])/n1 - sum(var1 == outcome & group == levels(as.factor(group))[2])/n2 #
			}#
    	}#
#
		# calculate and print actual#
		actual = statistic(var1, group)#
		cat("Observed difference between ", est, "s = ", round(actual,4), "\n", sep = "")#
#
		# save label#
		label = paste("Difference in sample ", est, "s", ", ", levels(as.factor(group))[1],"-",levels(as.factor(group))[2], sep = "")#
		#
		# simulation#
		if(method == "simulation"){#
			n = length(var1)#
			sim = matrix(NA, nrow = n, ncol = nsim)#
			#
			# bootstrap ci#
			if(type == "ci"){#
				cat("Bootstrapping, please wait...", "\n")#
				#
				if(type1 == "quantitative"){statistic = match.fun(est)}#
				if(type1 == "categorical"){#
					statistic = function(x){#
						which_outcome = which(levels(var1) == outcome)#
						sum(x == which_outcome)/length(x)#
					}#
				}#
				#
				sim1 = matrix(NA, nrow = n1, ncol = nsim)#
				sim2 = matrix(NA, nrow = n2, ncol = nsim)#
#
				for(i in 1:nsim){sim1[,i] = sample(var1[group == order[1]], n1, replace = TRUE)}#
				for(i in 1:nsim){sim2[,i] = sample(var1[group == order[2]], n2, replace = TRUE)}#
				#
				sim_dist1 = apply(sim1, 2, statistic)#
				sim_dist2 = apply(sim2, 2, statistic)#
				#
				sim_dist = sim_dist1 - sim_dist2#
				#
				ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
				#
				if(nsim > 500){#
					counts = hist(sim_dist, plot = FALSE)$counts  #
					hist(sim_dist, main = "Bootstrap distribution", xlab = "bootstrap statistic")  #
				}#
				if(nsim <= 500){#
					counts = BHH2::dotPlot(sim_dist, main = "Bootstrap distribution", xlab = "bootstrap statistic")$y#
				}#
				#
				for (i in 1:2) {#
			    	segments(ci[i], 0, ci[i], 0.8 * max(counts), col="#225588", lwd=2)#
			    	text(round(ci[i],2), max(counts), pos=1, col="#225588", round(ci[i],2))#
			  	}#
#
				cat(c(conflevel*100, "% Bootstrap interval = (", round(ci[1],2), ",", round(ci[2],2), ")\n"))#
			}#
			#
			# randomization test			#
			if(type == "ht"){#
				# hypotheses#
				if(est == "mean"){#
					mu1 = paste("mu_", order[1], sep = "")		#
					mu2 = paste("mu_", order[2], sep = "")		#
					cat(paste("H0:", mu1 , "-", mu2, "=", null, "\n"))#
					cat(paste("HA:", mu1 , "-", mu2, sign, null, "\n"))#
				}#
									#
				if(est == "median"){#
					med1 = paste("median_", order[1], sep = "")		#
					med2 = paste("median_", order[2], sep = "")		#
					cat(paste("H0:", med1 , "-", med2, "=", null, "\n"))#
					cat(paste("HA:", med1 , "-", med2, sign, null, "\n"))#
				}#
				#
				if(est == "proportion"){#
					p1 = paste("p_", order[1], sep = "")		#
					p2 = paste("p_", order[2], sep = "")		#
					cat(paste("H0:", p1 , "-", p2, "=", null, "\n"))#
					cat(paste("HA:", p1 , "-", p2, sign, null, "\n"))#
				}#
				#
				cat("Randomizing, please wait...", "\n")#
				#
				for(i in 1:nsim){sim[,i] = sample(group, n, replace = FALSE)}#
				sim_dist = apply(sim, 2, statistic, var1 = var1)#
				#
				smaller.tail = round(min(c(mean(sim_dist <= actual), mean(sim_dist >= actual))), 4)#
				#
				xmin = min(c(-1.1*abs(actual), sim_dist))#
			  	xmax = max(c(1.1*actual, sim_dist))#
				#
				if(nsim > 500){#
					counts = hist(sim_dist, plot = FALSE)$counts  #
					hist(sim_dist, main = "Randomization distribution", xlab = "randomization statistic", ylim = c(0, 1.3 * max(counts)), xlim = c(xmin,xmax))  #
				}#
				if(nsim <= 500){#
					counts = BHH2::dotPlot(sim_dist, main = "Randomization distribution", xlab = "randomization statistic", xlim = c(xmin,xmax))$y#
				}#
				#
			    alternative = match.arg(alternative)#
#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)#
				}#
				if(alternative == "greater"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)#
				}#
				if(alternative == "twosided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)#
					if(actual >= null){#
						temp = actual - null#
						lines(x = c(null - temp,null - temp), y = c(0,1.1*max(counts)), col = "#225588", lwd=2)						#
					}#
					if(actual < null){#
						temp = null - actual#
						lines(x = c(null + temp,null + temp), y = c(0,1.1*max(counts)), col = "#225588", lwd=2)						#
					}		#
				}#
				#
				text(x = actual, y = 1.25*max(counts), paste("observed\n", round(actual,4)), col = "#225588", cex = 0.8)											#
			}#
#
		}#
		#
		# theoretical#
		if(method == "theoretical"){#
			#
			# confidence interval#
			if(type == "ci"){#
				if(type1 == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")#
					}#
					if(est == "mean"){#
						# check conditions#
						boxplot(var1 ~ var2, main = "Boxplot of sample data", xlab = "sample data")#
						cat("Check boxplot to verify that sample data do not come from extremely skewed distributions.\n")#
						# calculate se and critvalue#
						s1 = sd(var1[group == levels(group)[1]])#
						s2 = sd(var1[group == levels(group)[2]])#
						se = sqrt(s1^2/n1 + s2^2/n2)#
						cat("Standard error =", round(se,4), "\n")#
						if(n1 >= 50 & n2 >= 50){critvalue = qnorm( (1 - conflevel)/2 + conflevel )}#
						if(n1 < 50 | n2 < 50) {critvalue = qt( (1 - conflevel)/2 + conflevel , df = min(n1 - 1, n2 - 1))}						#
					}#
					#
				}#
			#
				if(type1 == "categorical"){#
					# check conditions#
					suc1 = sum(var1[group == levels(group)[1]] == outcome)#
					fail1 = sum(var1[group == levels(group)[1]] != outcome)#
					cat(paste("Group 1: Number of successes =", round(suc1), ";", "Number of failures =", round(fail1)), "\n")	#
					#
					suc2 = sum(var1[group == levels(group)[2]] == outcome)#
					fail2 = sum(var1[group == levels(group)[2]] != outcome)#
					cat(paste("Group 2: Number of successes =", round(suc2), ";", "Number of failures =", round(fail2)), "\n")#
					#
					if(suc1 < 10 | fail1 < 10 | suc2 < 10 | fail2 < 10){#
						stop("There aren't at least 10 successes and 10 failures, use simulation methods instead.")#
					}#
					# calculate se and critvalue#
					p1 = suc1 / n1#
					p2 = suc2 / n2#
					se = sqrt(p1 * (1-p1)/n1 + p2 * (1-p2)/n2)#
					cat("Standard error =", round(se,4), "\n")#
					critvalue = qnorm( (1 - conflevel)/2 + conflevel )					#
					#
				}#
				#
				# calculate ci#
				me = critvalue * se#
				ci = c(actual - me , actual + me)#
				cat(c(conflevel*100, "% Confidence interval = (", round(ci[1],2), ",", round(ci[2],2), ")\n"))#
			}#
			#
			# hypothesis test#
			if(type == "ht"){#
				if(type1 == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")#
					}#
					if(est == "mean"){#
						# hypotheses#
						mu1 = paste("mu_", order[1], sep = "")		#
						mu2 = paste("mu_", order[2], sep = "")		#
						cat(paste("H0:", mu1 , "-", mu2, "=", null, "\n"))#
						cat(paste("HA:", mu1 , "-", mu2, sign, null, "\n"))#
						# check conditions#
						par(mfrow = c(1,2))#
						boxplot(var1 ~ var2, main = "Boxplot of sample data", xlab = "sample data")#
						cat("Check boxplot to verify that sample data do not come from extremely skewed distributions.\n")#
						# calculate test statistic and p-value component#
						s1 = sd(var1[group == levels(group)[1]])#
						s2 = sd(var1[group == levels(group)[2]])#
						se = sqrt(s1^2/n1 + s2^2/n2)#
						cat("Standard error =", round(se,3), "\n")#
						teststat = (actual - null)/se#
						if(n1 >= 50 & n2 >= 50){#
							cat(paste("Test statistic: Z = ", round(teststat, 3),"\n"))#
							smaller.tail = round(min(pnorm(teststat), pnorm(teststat, lower.tail = FALSE)), 4)#
							}#
						if(n1 < 50 | n2 < 50) {#
							cat(paste("Test statistic: T = ", round(teststat, 3),"\n"))#
							cat(paste("Degrees of freedom: ", min(n1 - 1, n2 - 1), "\n"))#
							smaller.tail = round(min(pt(teststat, df = min(n1 - 1, n2 - 1)), pt(teststat, df = min(n1 - 1, n2 - 1), lower.tail = FALSE)), 4)#
							}						#
					}	#
				}#
				if(type1 == "categorical"){#
					if(null <= -1 | null >= 1){#
						stop("Null value should be a proportion between 0 and 1.")#
					}#
					# hypotheses#
					p1 = paste("p_", order[1], sep = "")		#
					p2 = paste("p_", order[2], sep = "")		#
					cat(paste("H0:", p1 , "-", p2, "=", null, "\n"))#
					cat(paste("HA:", p1 , "-", p2, sign, null, "\n"))#
#
					# calculate p_pool#
					suc1 = sum(var1[group == levels(group)[1]] == outcome)#
					fail1 = sum(var1[group == levels(group)[1]] != outcome)#
					suc2 = sum(var1[group == levels(group)[2]] == outcome)#
					fail2 = sum(var1[group == levels(group)[2]] != outcome)#
					p_pool =  (suc1 + suc2)/(n1 + n2)#
					cat(paste("Pooled proportion =", round(p_pool, 4), "\n"))	#
					#
					# check conditions#
					exp_suc1 = n1 * p_pool#
					exp_fail1 = n1 * (1 - p_pool)#
					cat(paste("Group 1: Number of expected successes =", round(exp_suc1), ";", "Number of expected failures =", round(exp_fail1)), "\n")#
					exp_suc2 = n2 * p_pool#
					exp_fail2 = n2 * (1 - p_pool)#
					cat(paste("Group 2: Number of expected successes =", round(exp_suc2), ";", "Number of expected failures =", round(exp_fail2)), "\n")#
					if(exp_suc1 < 10 | exp_fail1 < 10 | exp_suc2 < 10 | exp_fail2 < 10){#
						stop("There aren't at least 10 expected successes and 10 expected failures, use simulation methods instead.")#
					}#
					# calculate test statistic and p-value#
					se = sqrt( p_pool * (1 - p_pool) / n1 + p_pool * (1 - p_pool) / n2 )#
					cat("Standard error =", round(se,3), "\n")#
					teststat = (actual - null) / se#
					cat(paste("Test statistic: Z = ", round(teststat, 3),"\n"))#
					smaller.tail = round(min(pnorm(teststat), pnorm(teststat, lower.tail = FALSE)), 4)								#
				}#
				# alternative = less#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					normTail(L = teststat, axes = FALSE, col = "#22558833")#
					axis(1, at = c(-3, teststat, 0, 3), labels = c(NA, paste(round(actual,2)), paste(null), NA))#
				}#
				# alternative = greater#
				if(alternative == "greater"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					normTail(U = teststat, axes = FALSE, col = "#22558833")#
					axis(1, at = c(-3, 0, teststat, 3), labels = c(NA, paste(null), paste(round(actual,2)), NA))#
				}				#
				# alternative = twosided	#
				if(alternative == "twosided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					if(actual < null){#
						normTail(L = teststat, U = -1*teststat, axes = FALSE, col = "#22558833")#
						axis(1, at = c(-3, teststat, 0, -1*teststat, 3), labels = c(NA, paste(round(actual,2)), paste(null), paste(round(null + (null - actual), 2)), NA))#
					}#
					if(actual > null){#
						normTail(L = -1*teststat, U = teststat, axes = FALSE, col = "#22558833")#
						axis(1, at = c(-3, -1*teststat, 0, teststat, 3), labels = c(NA, paste(round(null - (actual - null), 2)), paste(null), paste(round(actual,2)), NA))#
					}				#
				}#
				par(mfrow = c(1,1))#
#
			}#
			#
		}#
	#
	}#
	#
}
44.50 - 53.43
q()
